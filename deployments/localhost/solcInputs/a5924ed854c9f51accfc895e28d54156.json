{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\n//pragma\npragma solidity 0.8.7;\n\n// imports\nimport \"./Library.sol\";\n\n// error code\nerror FundMe__NotOwner();\n\n/// @title A contract for the funding\n/// @author Rakshith kumar s\n/// @notice this contract is to demo the smaple funding contract\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  address[] public senders;\n\n  uint256 public constant MINIMUN_USD = 1 * 1e18;\n  mapping(address => uint256) public addressToValue;\n\n  address public immutable owner;\n\n  AggregatorV3Interface public priceFeed;\n\n  constructor(address priceFeedAddress) {\n    owner = msg.sender;\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  // modifier are used to check the prerequisites for the function\n  // if it contains all the prerequisites, then it will the function\n  // else it will throw the error\n  // modifier onlyOwner() {\n  //   if (msg.sender == owner) revert FundMe_NotOwner();\n  //   _;\n  //   // require(msg.sender == owner, \"you are not the owner\");\n  //   // _; // _ is used to continue the th function\n  // }\n  modifier onlyOwner() {\n    // require(msg.sender == i_owner);\n    if (msg.sender != owner) revert FundMe__NotOwner();\n    _;\n  }\n\n  function fundme() public payable {\n    require(\n      PriceConverter.getConverstionRate(msg.value, priceFeed) > MINIMUN_USD,\n      \"don't enough fund\"\n    );\n    senders.push(msg.sender);\n    addressToValue[msg.sender] = msg.value;\n  }\n\n  function withDraw() public onlyOwner {\n    for (uint256 funderIndex = 0; funderIndex < senders.length; funderIndex++) {\n      address senderAddress = senders[funderIndex];\n      addressToValue[senderAddress] = 0;\n    }\n    senders = new address[](0);\n\n    // payable(msg.sender).transfer(address(this).balance);\n    // bool snedFail = payable(msg.sender).send(address(this).balance);\n    // require(snedFail , \"send Failes\");\n\n    (\n      bool callSuccess, // bytes memory dataReturn\n\n    ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n    require(callSuccess, \"call failed\");\n  }\n\n  receive() external payable {\n    fundme();\n  }\n\n  fallback() external payable {\n    fundme();\n  }\n}\n"
    },
    "contracts/Library.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n    // );\n    (\n      ,\n      /*uint80 roundID*/\n      int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\n      ,\n      ,\n\n    ) = priceFeed.latestRoundData();\n    return uint256(price * 1e10);\n  }\n\n  function getConverstionRate(\n    uint256 ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\n    return ethAmountInUsd;\n  }\n\n  // function getVersion() internal view returns (uint256) {\n  //     //ABI\n  //     //Address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n  //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\n  //         0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n  //     );\n  //     return priceFeed.version();\n  // }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}